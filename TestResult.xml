<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="/home/zach/Projects/FunScript/FunScript.Tests/bin/Debug/FunScript.Tests.dll" total="432" errors="0" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2012-12-22" time="15:57:43">
  <environment nunit-version="2.6.0.0" clr-version="4.0.30319.1" os-version="Unix 3.5.0.19" platform="Unix" cwd="/home/zach/Projects/FunScript" machine-name="laptop" user="zach" user-domain="laptop" />
  <culture-info current-culture="en-GB" current-uiculture="en-GB" />
  <test-suite type="Assembly" name="/home/zach/Projects/FunScript/FunScript.Tests/bin/Debug/FunScript.Tests.dll" executed="True" result="Success" success="True" time="96.223" asserts="0">
    <results>
      <test-suite type="Namespace" name="FunScript" executed="True" result="Success" success="True" time="96.218" asserts="0">
        <results>
          <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="96.218" asserts="0">
            <results>
              <test-suite type="TestFixture" name="Arithmetic" executed="True" result="Success" success="True" time="1.255" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.Arithmetic.Evaluation order is preserved by generated code" executed="True" result="Success" success="True" time="1.117" asserts="1" />
                  <test-case name="FunScript.Tests.Arithmetic.Infix add can be generated" executed="True" result="Success" success="True" time="0.033" asserts="1" />
                  <test-case name="FunScript.Tests.Arithmetic.Infix divide can be generated" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                  <test-case name="FunScript.Tests.Arithmetic.Infix modulo can be generated" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                  <test-case name="FunScript.Tests.Arithmetic.Infix multiply can be generated" executed="True" result="Success" success="True" time="0.030" asserts="1" />
                  <test-case name="FunScript.Tests.Arithmetic.Infix subtract can be generated" executed="True" result="Success" success="True" time="0.018" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Arrays" executed="True" result="Success" success="True" time="3.046" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.Arrays.Array indexer getter works" executed="True" result="Success" success="True" time="0.064" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array indexer setter works" executed="True" result="Success" success="True" time="0.044" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array literals work" executed="True" result="Success" success="True" time="0.021" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.append works" executed="True" result="Success" success="True" time="0.086" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.average works" executed="True" result="Success" success="True" time="0.077" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.averageBy works" executed="True" result="Success" success="True" time="0.051" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.blit works" executed="True" result="Success" success="True" time="0.030" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.choose works" executed="True" result="Success" success="True" time="0.086" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.collect works" executed="True" result="Success" success="True" time="0.036" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.concat works" executed="True" result="Success" success="True" time="0.140" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.copy works" executed="True" result="Success" success="True" time="0.037" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.empty works" executed="True" result="Success" success="True" time="0.026" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.exists works" executed="True" result="Success" success="True" time="0.032" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.exists2 works" executed="True" result="Success" success="True" time="0.043" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.fill works" executed="True" result="Success" success="True" time="0.024" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.filter works" executed="True" result="Success" success="True" time="0.042" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.find works" executed="True" result="Success" success="True" time="0.046" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.findIndex works" executed="True" result="Success" success="True" time="0.037" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.fold works" executed="True" result="Success" success="True" time="0.042" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.fold2 works" executed="True" result="Success" success="True" time="0.032" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.foldBack works" executed="True" result="Success" success="True" time="0.037" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.foldBack2 works" executed="True" result="Success" success="True" time="0.043" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.forall works" executed="True" result="Success" success="True" time="0.029" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.forall2 works" executed="True" result="Success" success="True" time="0.046" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.init works" executed="True" result="Success" success="True" time="0.023" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.isEmpty works" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.iter works" executed="True" result="Success" success="True" time="0.052" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.iter2 works" executed="True" result="Success" success="True" time="0.045" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.iteri works" executed="True" result="Success" success="True" time="0.034" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.iteri2 works" executed="True" result="Success" success="True" time="0.046" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.length works" executed="True" result="Success" success="True" time="0.021" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.Length works" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.map works" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.map2 works" executed="True" result="Success" success="True" time="0.041" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.mapi works" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.mapi2 works" executed="True" result="Success" success="True" time="0.045" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.max works" executed="True" result="Success" success="True" time="0.032" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.maxBy works" executed="True" result="Success" success="True" time="0.044" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.min works" executed="True" result="Success" success="True" time="0.030" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.minBy works" executed="True" result="Success" success="True" time="0.042" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.ofList works" executed="True" result="Success" success="True" time="0.058" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.ofSeq works" executed="True" result="Success" success="True" time="0.108" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.partition works" executed="True" result="Success" success="True" time="0.052" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.permute works" executed="True" result="Success" success="True" time="0.058" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.pick works" executed="True" result="Success" success="True" time="0.034" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.reduce works" executed="True" result="Success" success="True" time="0.041" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.reduceBack works" executed="True" result="Success" success="True" time="0.041" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.rev works" executed="True" result="Success" success="True" time="0.026" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.scan works" executed="True" result="Success" success="True" time="0.048" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.scanBack works" executed="True" result="Success" success="True" time="0.030" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.sort works" executed="True" result="Success" success="True" time="0.043" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.sortBy works" executed="True" result="Success" success="True" time="0.032" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.sortInPlace works" executed="True" result="Success" success="True" time="0.035" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.sortInPlaceBy works" executed="True" result="Success" success="True" time="0.027" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.sortInPlaceWith works" executed="True" result="Success" success="True" time="0.036" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.sortWith works" executed="True" result="Success" success="True" time="0.029" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.sub works" executed="True" result="Success" success="True" time="0.033" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.sum works" executed="True" result="Success" success="True" time="0.028" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.sumBy works" executed="True" result="Success" success="True" time="0.042" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.toList works" executed="True" result="Success" success="True" time="0.046" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.toSeq works" executed="True" result="Success" success="True" time="0.106" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.tryFind works" executed="True" result="Success" success="True" time="0.036" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.tryFindIndex works" executed="True" result="Success" success="True" time="0.046" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.tryPick works" executed="True" result="Success" success="True" time="0.035" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.unzip works" executed="True" result="Success" success="True" time="0.037" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.unzip3 works" executed="True" result="Success" success="True" time="0.047" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.zeroCreate works" executed="True" result="Success" success="True" time="0.021" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.zip works" executed="True" result="Success" success="True" time="0.044" asserts="1" />
                  <test-case name="FunScript.Tests.Arrays.Array.zip3 works" executed="True" result="Success" success="True" time="0.038" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Asyncs" executed="True" result="Success" success="True" time="0.124" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.Asyncs.Simple async translates without exception" executed="True" result="Success" success="True" time="0.123" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="CommonOperators" executed="True" result="Success" success="True" time="0.740" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.CommonOperators.the ! operator works" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                  <test-case name="FunScript.Tests.CommonOperators.the .. .. operator works" executed="True" result="Success" success="True" time="0.135" asserts="1" />
                  <test-case name="FunScript.Tests.CommonOperators.the .. operator works" executed="True" result="Success" success="True" time="0.134" asserts="1" />
                  <test-case name="FunScript.Tests.CommonOperators.the := operator works" executed="True" result="Success" success="True" time="0.021" asserts="1" />
                  <test-case name="FunScript.Tests.CommonOperators.the |||&gt; operator works" executed="True" result="Success" success="True" time="0.041" asserts="1" />
                  <test-case name="FunScript.Tests.CommonOperators.the ||&gt; operator works" executed="True" result="Success" success="True" time="0.023" asserts="1" />
                  <test-case name="FunScript.Tests.CommonOperators.the |&gt; operator works" executed="True" result="Success" success="True" time="0.021" asserts="1" />
                  <test-case name="FunScript.Tests.CommonOperators.the |&gt; operator works with functions that return functions" executed="True" result="Success" success="True" time="0.035" asserts="1" />
                  <test-case name="FunScript.Tests.CommonOperators.the |&gt; operator works with functions that return functions that return functions" executed="True" result="Success" success="True" time="0.027" asserts="1" />
                  <test-case name="FunScript.Tests.CommonOperators.the &lt;| operator works" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                  <test-case name="FunScript.Tests.CommonOperators.the &lt;|| operator works" executed="True" result="Success" success="True" time="0.024" asserts="1" />
                  <test-case name="FunScript.Tests.CommonOperators.the &lt;||| operator works" executed="True" result="Success" success="True" time="0.025" asserts="1" />
                  <test-case name="FunScript.Tests.CommonOperators.the &lt;&lt; operator works" executed="True" result="Success" success="True" time="0.034" asserts="1" />
                  <test-case name="FunScript.Tests.CommonOperators.the &gt;&gt; operator works" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                  <test-case name="FunScript.Tests.CommonOperators.the &gt;&gt; operator works with functions that take tuples" executed="True" result="Success" success="True" time="0.041" asserts="1" />
                  <test-case name="FunScript.Tests.CommonOperators.the defaultArg function works" executed="True" result="Success" success="True" time="0.024" asserts="1" />
                  <test-case name="FunScript.Tests.CommonOperators.the id function works" executed="True" result="Success" success="True" time="0.018" asserts="1" />
                  <test-case name="FunScript.Tests.CommonOperators.the ignore function works" executed="True" result="Success" success="True" time="0.029" asserts="1" />
                  <test-case name="FunScript.Tests.CommonOperators.the ref function works" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Comparison" executed="True" result="Success" success="True" time="12.803" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.Comparison.Infix equality works" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                  <test-case name="FunScript.Tests.Comparison.Infix greater than or equal to works" executed="True" result="Success" success="True" time="0.030" asserts="1" />
                  <test-case name="FunScript.Tests.Comparison.Infix greater than works" executed="True" result="Success" success="True" time="0.018" asserts="1" />
                  <test-case name="FunScript.Tests.Comparison.Infix inequality works" executed="True" result="Success" success="True" time="0.030" asserts="1" />
                  <test-case name="FunScript.Tests.Comparison.Infix less than or equal to works" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                  <test-case name="FunScript.Tests.Comparison.Infix less than works" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                  <test-case name="FunScript.Tests.Comparison.structural equality works" executed="True" result="Success" success="True" time="2.139" asserts="64" />
                  <test-case name="FunScript.Tests.Comparison.structural greater than or equal to works" executed="True" result="Success" success="True" time="2.084" asserts="64" />
                  <test-case name="FunScript.Tests.Comparison.structural greater than works" executed="True" result="Success" success="True" time="2.127" asserts="64" />
                  <test-case name="FunScript.Tests.Comparison.structural inequality works" executed="True" result="Success" success="True" time="2.152" asserts="64" />
                  <test-case name="FunScript.Tests.Comparison.structural less than or equal to works" executed="True" result="Success" success="True" time="2.075" asserts="64" />
                  <test-case name="FunScript.Tests.Comparison.structural less than works" executed="True" result="Success" success="True" time="2.082" asserts="64" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ControlFlow" executed="True" result="Success" success="True" time="0.182" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.ControlFlow.For i = 0 to N expressions work" executed="True" result="Success" success="True" time="0.033" asserts="1" />
                  <test-case name="FunScript.Tests.ControlFlow.If then else expressions work" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                  <test-case name="FunScript.Tests.ControlFlow.If then else expressions work inline" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                  <test-case name="FunScript.Tests.ControlFlow.Lambdas inside for loops create closures" executed="True" result="Success" success="True" time="0.035" asserts="1" />
                  <test-case name="FunScript.Tests.ControlFlow.Matching when the matched variable name is re-used in the case works" executed="True" result="Success" success="True" time="0.034" asserts="1" />
                  <test-case name="FunScript.Tests.ControlFlow.While expressions work" executed="True" result="Success" success="True" time="0.034" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="LambdaApplication" executed="True" result="Success" success="True" time="0.156" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.LambdaApplication.Applying let bound functions works" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                  <test-case name="FunScript.Tests.LambdaApplication.Constructing delegates works" executed="True" result="Success" success="True" time="0.034" asserts="1" />
                  <test-case name="FunScript.Tests.LambdaApplication.Constructing tupled delegates works" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                  <test-case name="FunScript.Tests.LambdaApplication.Defining lambdas works" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                  <test-case name="FunScript.Tests.LambdaApplication.Invoking delegates works" executed="True" result="Success" success="True" time="0.037" asserts="1" />
                  <test-case name="FunScript.Tests.LambdaApplication.Invoking tupled delegates works" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="LetBindings" executed="True" result="Success" success="True" time="0.177" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.LetBindings.Inner-scope let-bindings do not destroy outer-scope let-bindings" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                  <test-case name="FunScript.Tests.LetBindings.Let bindings can be generated" executed="True" result="Success" success="True" time="0.033" asserts="1" />
                  <test-case name="FunScript.Tests.LetBindings.Let bindings inline can be generated" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                  <test-case name="FunScript.Tests.LetBindings.Mutable let bindings can be generated" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                  <test-case name="FunScript.Tests.LetBindings.Mutations of let bindings can be generated" executed="True" result="Success" success="True" time="0.033" asserts="1" />
                  <test-case name="FunScript.Tests.LetBindings.Recursive let bindings can be generated" executed="True" result="Success" success="True" time="0.048" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Lists" executed="True" result="Success" success="True" time="3.934" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.Lists.List cons works" executed="True" result="Success" success="True" time="0.048" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List literals work" executed="True" result="Success" success="True" time="0.027" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.append works" executed="True" result="Success" success="True" time="0.061" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.average works" executed="True" result="Success" success="True" time="0.045" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.averageBy works" executed="True" result="Success" success="True" time="0.057" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.choose works" executed="True" result="Success" success="True" time="0.066" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.collect works" executed="True" result="Success" success="True" time="0.073" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.empty works" executed="True" result="Success" success="True" time="0.030" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.exists works" executed="True" result="Success" success="True" time="0.050" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.exists2 works" executed="True" result="Success" success="True" time="0.057" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.filter works" executed="True" result="Success" success="True" time="0.045" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.find works" executed="True" result="Success" success="True" time="0.057" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.findIndex works" executed="True" result="Success" success="True" time="0.060" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.fold works" executed="True" result="Success" success="True" time="0.044" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.fold2 works" executed="True" result="Success" success="True" time="0.063" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.foldBack works" executed="True" result="Success" success="True" time="0.054" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.foldBack2 works" executed="True" result="Success" success="True" time="0.075" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.forall works" executed="True" result="Success" success="True" time="0.038" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.forall2 works" executed="True" result="Success" success="True" time="0.062" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.head works" executed="True" result="Success" success="True" time="0.044" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.Head works" executed="True" result="Success" success="True" time="0.029" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.init works" executed="True" result="Success" success="True" time="0.048" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.isEmpty works" executed="True" result="Success" success="True" time="0.026" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.IsEmpty works" executed="True" result="Success" success="True" time="0.028" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.Item works" executed="True" result="Success" success="True" time="0.052" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.iter works" executed="True" result="Success" success="True" time="0.057" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.iter2 works" executed="True" result="Success" success="True" time="0.049" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.iteri works" executed="True" result="Success" success="True" time="0.058" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.iteri2 works" executed="True" result="Success" success="True" time="0.062" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.length works" executed="True" result="Success" success="True" time="0.054" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.Length works" executed="True" result="Success" success="True" time="0.037" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.map works" executed="True" result="Success" success="True" time="0.060" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.map2 works" executed="True" result="Success" success="True" time="0.071" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.map3 works" executed="True" result="Success" success="True" time="0.080" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.mapi works" executed="True" result="Success" success="True" time="0.048" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.mapi2 works" executed="True" result="Success" success="True" time="0.077" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.max works" executed="True" result="Success" success="True" time="0.053" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.maxBy works" executed="True" result="Success" success="True" time="0.058" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.min works" executed="True" result="Success" success="True" time="0.040" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.minBy works" executed="True" result="Success" success="True" time="0.055" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.nth works" executed="True" result="Success" success="True" time="0.052" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.ofArray works" executed="True" result="Success" success="True" time="0.034" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.ofSeq works" executed="True" result="Success" success="True" time="0.127" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.partition works" executed="True" result="Success" success="True" time="0.053" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.permute works" executed="True" result="Success" success="True" time="0.106" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.pick works" executed="True" result="Success" success="True" time="0.042" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.reduce works" executed="True" result="Success" success="True" time="0.053" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.reduceBack works" executed="True" result="Success" success="True" time="0.044" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.replicate works" executed="True" result="Success" success="True" time="0.048" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.rev works" executed="True" result="Success" success="True" time="0.054" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.scan works" executed="True" result="Success" success="True" time="0.059" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.scanBack works" executed="True" result="Success" success="True" time="0.055" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.sort works" executed="True" result="Success" success="True" time="0.080" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.sortBy works" executed="True" result="Success" success="True" time="0.099" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.sortWith works" executed="True" result="Success" success="True" time="0.086" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.sum works" executed="True" result="Success" success="True" time="0.036" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.sumBy works" executed="True" result="Success" success="True" time="0.054" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.tail works" executed="True" result="Success" success="True" time="0.034" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.Tail works" executed="True" result="Success" success="True" time="0.051" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.toArray works" executed="True" result="Success" success="True" time="0.042" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.toSeq works" executed="True" result="Success" success="True" time="0.120" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.tryFind works" executed="True" result="Success" success="True" time="0.044" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.tryFindIndex works" executed="True" result="Success" success="True" time="0.057" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.tryPick works" executed="True" result="Success" success="True" time="0.054" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.unzip works" executed="True" result="Success" success="True" time="0.047" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.unzip3 works" executed="True" result="Success" success="True" time="0.066" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.zip works" executed="True" result="Success" success="True" time="0.077" asserts="1" />
                  <test-case name="FunScript.Tests.Lists.List.zip3 works" executed="True" result="Success" success="True" time="0.088" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Logic" executed="True" result="Success" success="True" time="0.110" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.Logic.Evaluation order is preserved by generated code" executed="True" result="Success" success="True" time="0.035" asserts="1" />
                  <test-case name="FunScript.Tests.Logic.Infix AND can be generated" executed="True" result="Success" success="True" time="0.018" asserts="1" />
                  <test-case name="FunScript.Tests.Logic.Infix OR can be generated" executed="True" result="Success" success="True" time="0.019" asserts="1" />
                  <test-case name="FunScript.Tests.Logic.Not can be generated" executed="True" result="Success" success="True" time="0.035" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Maps" executed="True" result="Success" success="True" time="20.490" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.Maps.Map construction from lists works" executed="True" result="Success" success="True" time="0.697" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.add works" executed="True" result="Success" success="True" time="0.632" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.Add works" executed="True" result="Success" success="True" time="0.619" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.containsKey works" executed="True" result="Success" success="True" time="0.631" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.ContainsKey works" executed="True" result="Success" success="True" time="0.639" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.Count works" executed="True" result="Success" success="True" time="0.618" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.empty works" executed="True" result="Success" success="True" time="0.610" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.exists works" executed="True" result="Success" success="True" time="0.679" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.filter works" executed="True" result="Success" success="True" time="0.689" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.find works" executed="True" result="Success" success="True" time="0.668" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.fold works" executed="True" result="Success" success="True" time="0.684" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.foldBack works" executed="True" result="Success" success="True" time="0.668" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.forAll works" executed="True" result="Success" success="True" time="0.687" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.isEmpty works" executed="True" result="Success" success="True" time="0.634" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.IsEmpty works" executed="True" result="Success" success="True" time="0.620" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.iter works" executed="True" result="Success" success="True" time="0.679" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.map works" executed="True" result="Success" success="True" time="0.682" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.ofArray works" executed="True" result="Success" success="True" time="0.630" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.ofList works" executed="True" result="Success" success="True" time="0.641" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.ofSeq works" executed="True" result="Success" success="True" time="0.662" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.partition works" executed="True" result="Success" success="True" time="0.683" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.pick works" executed="True" result="Success" success="True" time="0.685" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.remove works" executed="True" result="Success" success="True" time="0.645" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.Remove works" executed="True" result="Success" success="True" time="0.659" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.toArray works" executed="True" result="Success" success="True" time="0.680" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.toList works" executed="True" result="Success" success="True" time="0.643" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.toSeq works" executed="True" result="Success" success="True" time="0.684" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.tryFind works" executed="True" result="Success" success="True" time="0.669" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.TryFind works" executed="True" result="Success" success="True" time="0.670" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.tryFindKey works" executed="True" result="Success" success="True" time="0.699" asserts="1" />
                  <test-case name="FunScript.Tests.Maps.Map.tryPick works" executed="True" result="Success" success="True" time="0.677" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Options" executed="True" result="Success" success="True" time="0.488" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.Options.Option.bind works" executed="True" result="Success" success="True" time="0.027" asserts="1" />
                  <test-case name="FunScript.Tests.Options.Option.count works" executed="True" result="Success" success="True" time="0.041" asserts="1" />
                  <test-case name="FunScript.Tests.Options.Option.exists works" executed="True" result="Success" success="True" time="0.027" asserts="1" />
                  <test-case name="FunScript.Tests.Options.Option.fold works" executed="True" result="Success" success="True" time="0.028" asserts="1" />
                  <test-case name="FunScript.Tests.Options.Option.foldBack works" executed="True" result="Success" success="True" time="0.023" asserts="1" />
                  <test-case name="FunScript.Tests.Options.Option.forall works" executed="True" result="Success" success="True" time="0.043" asserts="1" />
                  <test-case name="FunScript.Tests.Options.Option.get works" executed="True" result="Success" success="True" time="0.024" asserts="1" />
                  <test-case name="FunScript.Tests.Options.Option.isNone works" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                  <test-case name="FunScript.Tests.Options.Option.IsNone works" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                  <test-case name="FunScript.Tests.Options.Option.isSome works" executed="True" result="Success" success="True" time="0.040" asserts="1" />
                  <test-case name="FunScript.Tests.Options.Option.IsSome works" executed="True" result="Success" success="True" time="0.021" asserts="1" />
                  <test-case name="FunScript.Tests.Options.Option.iter works" executed="True" result="Success" success="True" time="0.030" asserts="1" />
                  <test-case name="FunScript.Tests.Options.Option.map works" executed="True" result="Success" success="True" time="0.035" asserts="1" />
                  <test-case name="FunScript.Tests.Options.Option.toArray works" executed="True" result="Success" success="True" time="0.040" asserts="1" />
                  <test-case name="FunScript.Tests.Options.Option.toList works" executed="True" result="Success" success="True" time="0.032" asserts="1" />
                  <test-case name="FunScript.Tests.Options.Option.Value works" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="PrimitiveTypes" executed="True" result="Success" success="True" time="0.132" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.PrimitiveTypes.Bools are generated as bools" executed="True" result="Success" success="True" time="0.018" asserts="1" />
                  <test-case name="FunScript.Tests.PrimitiveTypes.Chars are generated as strings" executed="True" result="Success" success="True" time="0.035" asserts="1" />
                  <test-case name="FunScript.Tests.PrimitiveTypes.Floats are generated as numbers" executed="True" result="Success" success="True" time="0.018" asserts="1" />
                  <test-case name="FunScript.Tests.PrimitiveTypes.Ints are generated as numbers" executed="True" result="Success" success="True" time="0.018" asserts="1" />
                  <test-case name="FunScript.Tests.PrimitiveTypes.Strings are generated as strings" executed="True" result="Success" success="True" time="0.018" asserts="1" />
                  <test-case name="FunScript.Tests.PrimitiveTypes.Unit is generated as null" executed="True" result="Success" success="True" time="0.018" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="RecordTypes" executed="True" result="Success" success="True" time="0.088" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.RecordTypes.Record constructors can be generated" executed="True" result="Success" success="True" time="0.038" asserts="1" />
                  <test-case name="FunScript.Tests.RecordTypes.Record expression constructors can be generated" executed="True" result="Success" success="True" time="0.025" asserts="1" />
                  <test-case name="FunScript.Tests.RecordTypes.Record property access can be generated" executed="True" result="Success" success="True" time="0.023" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="ReflectedDefinitions" executed="True" result="Success" success="True" time="1.128" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.ReflectedDefinitions.application of a curried instance method works" executed="True" result="Success" success="True" time="0.050" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.application of a curried module method works" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.application of a curried record method works" executed="True" result="Success" success="True" time="0.029" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.application of a curried union method works" executed="True" result="Success" success="True" time="0.029" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.application of a partially tupled curried instance method works" executed="True" result="Success" success="True" time="0.052" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.application of a partially tupled curried module method works" executed="True" result="Success" success="True" time="0.023" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.application of a partially tupled tupled instance method works" executed="True" result="Success" success="True" time="0.032" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.application of a partially tupled tupled module method works" executed="True" result="Success" success="True" time="0.041" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.application of a static curried method works" executed="True" result="Success" success="True" time="0.023" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.application of a static tupled method works" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.application of a tupled instance method works" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.application of a tupled module method works" executed="True" result="Success" success="True" time="0.037" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.application of a tupled record method works" executed="True" result="Success" success="True" time="0.026" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.application of a tupled union method works" executed="True" result="Success" success="True" time="0.027" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.constructing instances works" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.generic methods on instances work" executed="True" result="Success" success="True" time="0.032" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.generic methods on records work" executed="True" result="Success" success="True" time="0.027" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.generic methods on unions work" executed="True" result="Success" success="True" time="0.027" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.getting a module property works" executed="True" result="Success" success="True" time="0.035" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.getting a static property works" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.getting an instance property works" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.getting an record property works" executed="True" result="Success" success="True" time="0.026" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.getting an union property works" executed="True" result="Success" success="True" time="0.043" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.let bound fields on instances work" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.let bound fields on records work" executed="True" result="Success" success="True" time="0.026" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.let bound fields on unions work" executed="True" result="Success" success="True" time="0.042" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.partial application of a curried instance method works" executed="True" result="Success" success="True" time="0.033" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.partial application of a curried module method works" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.partial application of a curried record method works" executed="True" result="Success" success="True" time="0.045" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.partial application of a curried union method works" executed="True" result="Success" success="True" time="0.029" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.partial application of a static method works" executed="True" result="Success" success="True" time="0.021" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.setting a mutable module property works" executed="True" result="Success" success="True" time="0.024" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.setting a static property works" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.setting an instance property works" executed="True" result="Success" success="True" time="0.049" asserts="1" />
                  <test-case name="FunScript.Tests.ReflectedDefinitions.setting an record property works" executed="True" result="Success" success="True" time="0.027" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Seqs" executed="True" result="Success" success="True" time="10.569" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.Seqs.Seq.append works" executed="True" result="Success" success="True" time="0.145" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.average works" executed="True" result="Success" success="True" time="0.121" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.averageBy works" executed="True" result="Success" success="True" time="0.118" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.cast works" executed="True" result="Success" success="True" time="0.117" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.choose works" executed="True" result="Success" success="True" time="0.139" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.collect works" executed="True" result="Success" success="True" time="0.186" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.compareWith works" executed="True" result="Success" success="True" time="0.124" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.concat works" executed="True" result="Success" success="True" time="0.150" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.countBy works" executed="True" result="Success" success="True" time="0.716" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.delay works" executed="True" result="Success" success="True" time="0.108" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.distinct works" executed="True" result="Success" success="True" time="0.892" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.distinctBy works" executed="True" result="Success" success="True" time="0.908" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.empty works" executed="True" result="Success" success="True" time="0.074" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.exactlyOne works" executed="True" result="Success" success="True" time="0.108" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.exists works" executed="True" result="Success" success="True" time="0.113" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.exists2 works" executed="True" result="Success" success="True" time="0.116" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.filter works" executed="True" result="Success" success="True" time="0.125" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.find works" executed="True" result="Success" success="True" time="0.116" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.findIndex works" executed="True" result="Success" success="True" time="0.120" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.fold works" executed="True" result="Success" success="True" time="0.116" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.forall works" executed="True" result="Success" success="True" time="0.112" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.forall2 works" executed="True" result="Success" success="True" time="0.122" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.groupBy works" executed="True" result="Success" success="True" time="0.704" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.head works" executed="True" result="Success" success="True" time="0.113" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.init works" executed="True" result="Success" success="True" time="0.088" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.initInfinite works" executed="True" result="Success" success="True" time="0.114" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.isEmpty works" executed="True" result="Success" success="True" time="0.106" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.iter works" executed="True" result="Success" success="True" time="0.116" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.iter2 works" executed="True" result="Success" success="True" time="0.124" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.iteri works" executed="True" result="Success" success="True" time="0.117" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.last works" executed="True" result="Success" success="True" time="0.116" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.length works" executed="True" result="Success" success="True" time="0.109" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.map works" executed="True" result="Success" success="True" time="0.124" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.map2 works" executed="True" result="Success" success="True" time="0.115" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.mapi works" executed="True" result="Success" success="True" time="0.128" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.max works" executed="True" result="Success" success="True" time="0.117" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.maxBy works" executed="True" result="Success" success="True" time="0.119" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.min works" executed="True" result="Success" success="True" time="0.119" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.minBy works" executed="True" result="Success" success="True" time="0.118" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.nth works" executed="True" result="Success" success="True" time="0.108" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.ofArray works" executed="True" result="Success" success="True" time="0.097" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.ofList works" executed="True" result="Success" success="True" time="0.109" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.pairwise works" executed="True" result="Success" success="True" time="0.149" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.pick works" executed="True" result="Success" success="True" time="0.114" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.readonly works" executed="True" result="Success" success="True" time="0.120" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.reduce works" executed="True" result="Success" success="True" time="0.116" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.scan works" executed="True" result="Success" success="True" time="0.135" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.singleton works" executed="True" result="Success" success="True" time="0.096" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.skip works" executed="True" result="Success" success="True" time="0.117" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.skipWhile works" executed="True" result="Success" success="True" time="0.135" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.sortBy works" executed="True" result="Success" success="True" time="0.141" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.sum works" executed="True" result="Success" success="True" time="0.108" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.sumBy works" executed="True" result="Success" success="True" time="0.112" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.take works" executed="True" result="Success" success="True" time="0.128" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.takeWhile works" executed="True" result="Success" success="True" time="0.131" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.toArray works" executed="True" result="Success" success="True" time="0.112" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.toList works" executed="True" result="Success" success="True" time="0.120" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.truncate works" executed="True" result="Success" success="True" time="0.130" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.tryFind works" executed="True" result="Success" success="True" time="0.114" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.tryFindIndex works" executed="True" result="Success" success="True" time="0.117" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.tryPick works" executed="True" result="Success" success="True" time="0.117" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.unfold works" executed="True" result="Success" success="True" time="0.105" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.where works" executed="True" result="Success" success="True" time="0.131" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.zip works" executed="True" result="Success" success="True" time="0.123" asserts="1" />
                  <test-case name="FunScript.Tests.Seqs.Seq.zip3 works" executed="True" result="Success" success="True" time="0.135" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Sets" executed="True" result="Success" success="True" time="39.140" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.Sets.Set (-) works" executed="True" result="Success" success="True" time="0.888" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set (+) works" executed="True" result="Success" success="True" time="0.941" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.set function works" executed="True" result="Success" success="True" time="0.853" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.add works" executed="True" result="Success" success="True" time="0.793" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.Add works" executed="True" result="Success" success="True" time="0.784" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.contains works" executed="True" result="Success" success="True" time="0.794" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.Contains works" executed="True" result="Success" success="True" time="0.805" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.count works" executed="True" result="Success" success="True" time="0.793" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.Count works" executed="True" result="Success" success="True" time="0.787" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.difference works" executed="True" result="Success" success="True" time="0.872" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.empty works" executed="True" result="Success" success="True" time="0.799" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.exists works" executed="True" result="Success" success="True" time="0.865" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.filter works" executed="True" result="Success" success="True" time="0.871" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.fold works" executed="True" result="Success" success="True" time="0.848" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.foldBack works" executed="True" result="Success" success="True" time="0.894" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.forAll works" executed="True" result="Success" success="True" time="0.860" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.intersect works" executed="True" result="Success" success="True" time="0.887" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.intersectMany works" executed="True" result="Success" success="True" time="0.924" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.isEmpty works" executed="True" result="Success" success="True" time="0.783" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.IsEmpty works" executed="True" result="Success" success="True" time="0.780" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.isProperSubset works" executed="True" result="Success" success="True" time="0.875" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.IsProperSubset works" executed="True" result="Success" success="True" time="0.848" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.isProperSuperset works" executed="True" result="Success" success="True" time="0.861" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.IsProperSuperset works" executed="True" result="Success" success="True" time="0.868" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.isSubset works" executed="True" result="Success" success="True" time="0.865" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.IsSubset works" executed="True" result="Success" success="True" time="0.862" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.isSuperset works" executed="True" result="Success" success="True" time="0.860" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.IsSuperset works" executed="True" result="Success" success="True" time="0.862" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.iterate works" executed="True" result="Success" success="True" time="0.867" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.map works" executed="True" result="Success" success="True" time="0.865" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.maxElement works" executed="True" result="Success" success="True" time="0.861" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.MaximumElement works" executed="True" result="Success" success="True" time="0.856" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.minElement works" executed="True" result="Success" success="True" time="0.863" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.MinimumElement works" executed="True" result="Success" success="True" time="0.858" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.ofArray works" executed="True" result="Success" success="True" time="0.785" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.ofList works" executed="True" result="Success" success="True" time="0.857" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.ofSeq works" executed="True" result="Success" success="True" time="0.851" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.partition works" executed="True" result="Success" success="True" time="0.878" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.remove works" executed="True" result="Success" success="True" time="0.814" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.Remove works" executed="True" result="Success" success="True" time="0.788" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.singleton works" executed="True" result="Success" success="True" time="0.786" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.toArray works" executed="True" result="Success" success="True" time="0.803" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.toList works" executed="True" result="Success" success="True" time="0.843" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.toSeq works" executed="True" result="Success" success="True" time="0.859" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.union works" executed="True" result="Success" success="True" time="0.932" asserts="1" />
                  <test-case name="FunScript.Tests.Sets.Set.unionMany works" executed="True" result="Success" success="True" time="0.993" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Strings" executed="True" result="Success" success="True" time="1.318" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.Strings.String item works" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                  <test-case name="FunScript.Tests.Strings.String.collect works" executed="True" result="Success" success="True" time="0.118" asserts="1" />
                  <test-suite type="ParameterizedTest" name="String.forall and exists work" executed="True" result="Success" success="True" time="0.113" asserts="0">
                    <results>
                      <test-case name="FunScript.Tests.Strings.String.forall and exists work(&quot;aaa&quot;)" executed="True" result="Success" success="True" time="0.050" asserts="1" />
                      <test-case name="FunScript.Tests.Strings.String.forall and exists work(&quot;a!a&quot;)" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                      <test-case name="FunScript.Tests.Strings.String.forall and exists work(&quot;!!!&quot;)" executed="True" result="Success" success="True" time="0.031" asserts="1" />
                    </results>
                  </test-suite>
                  <test-case name="FunScript.Tests.Strings.String.IndexOf works" executed="True" result="Success" success="True" time="0.025" asserts="1" />
                  <test-case name="FunScript.Tests.Strings.String.init works" executed="True" result="Success" success="True" time="0.106" asserts="1" />
                  <test-suite type="ParameterizedTest" name="String.IsNullOrEmpty works" executed="True" result="Success" success="True" time="0.084" asserts="0">
                    <results>
                      <test-case name="FunScript.Tests.Strings.String.IsNullOrEmpty works(&quot;test&quot;)" executed="True" result="Success" success="True" time="0.021" asserts="1" />
                      <test-case name="FunScript.Tests.Strings.String.IsNullOrEmpty works(&quot;&quot;)" executed="True" result="Success" success="True" time="0.021" asserts="1" />
                      <test-case name="FunScript.Tests.Strings.String.IsNullOrEmpty works(null)" executed="True" result="Success" success="True" time="0.021" asserts="1" />
                    </results>
                  </test-suite>
                  <test-case name="FunScript.Tests.Strings.String.iter works" executed="True" result="Success" success="True" time="0.037" asserts="1" />
                  <test-case name="FunScript.Tests.Strings.String.iteri works" executed="True" result="Success" success="True" time="0.055" asserts="1" />
                  <test-case name="FunScript.Tests.Strings.String.Join works" executed="True" result="Success" success="True" time="0.023" asserts="1" />
                  <test-case name="FunScript.Tests.Strings.String.length (function) works" executed="True" result="Success" success="True" time="0.026" asserts="1" />
                  <test-case name="FunScript.Tests.Strings.String.Length works" executed="True" result="Success" success="True" time="0.023" asserts="1" />
                  <test-case name="FunScript.Tests.Strings.String.map works" executed="True" result="Success" success="True" time="0.123" asserts="1" />
                  <test-case name="FunScript.Tests.Strings.String.mapi works" executed="True" result="Success" success="True" time="0.148" asserts="1" />
                  <test-case name="FunScript.Tests.Strings.String.Replace works" executed="True" result="Success" success="True" time="0.027" asserts="1" />
                  <test-case name="FunScript.Tests.Strings.String.replicate works" executed="True" result="Success" success="True" time="0.115" asserts="1" />
                  <test-case name="FunScript.Tests.Strings.String.Split works" executed="True" result="Success" success="True" time="0.138" asserts="1" />
                  <test-case name="FunScript.Tests.Strings.String.ToCharArray returns array" executed="True" result="Success" success="True" time="0.047" asserts="1" />
                  <test-case name="FunScript.Tests.Strings.String.ToCharArray works" executed="True" result="Success" success="True" time="0.026" asserts="1" />
                  <test-case name="FunScript.Tests.Strings.String.ToUpper and String.ToLower work" executed="True" result="Success" success="True" time="0.043" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="Tuples" executed="True" result="Success" success="True" time="0.094" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.Tuples.fst function can be generated" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                  <test-case name="FunScript.Tests.Tuples.snd function can be generated" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                  <test-case name="FunScript.Tests.Tuples.Tuple declarations can be generated" executed="True" result="Success" success="True" time="0.023" asserts="1" />
                  <test-case name="FunScript.Tests.Tuples.Tuple dereferencing can be generated" executed="True" result="Success" success="True" time="0.023" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="UnionTypes" executed="True" result="Success" success="True" time="0.184" asserts="0">
                <results>
                  <test-case name="FunScript.Tests.UnionTypes.Union case constructions with many arguments can be generated" executed="True" result="Success" success="True" time="0.044" asserts="1" />
                  <test-case name="FunScript.Tests.UnionTypes.Union case constructions with no arguments can be generated" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                  <test-case name="FunScript.Tests.UnionTypes.Union case constructions with one argument can be generated" executed="True" result="Success" success="True" time="0.021" asserts="1" />
                  <test-case name="FunScript.Tests.UnionTypes.Union cases matches with many arguments can be generated" executed="True" result="Success" success="True" time="0.028" asserts="1" />
                  <test-case name="FunScript.Tests.UnionTypes.Union cases matches with no arguments can be generated" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                  <test-case name="FunScript.Tests.UnionTypes.Union cases matches with one argument can be generated" executed="True" result="Success" success="True" time="0.042" asserts="1" />
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>